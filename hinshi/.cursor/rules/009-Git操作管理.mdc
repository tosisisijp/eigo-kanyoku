---
description: "Git操作の安全な実行と管理に関する専門ルール - ユーザー許可・段階的実行・エラー処理を含む包括的Git操作ガイド"
globs: ["**/*.md", "**/*.mdc", ".git/**"]
alwaysApply: false
---
# Git操作管理 [Conditional]

このルールはGit操作の安全な実行と管理に関する専門ルールです。

## 基本方針

### Git操作の安全性原則
- **慎重性**: 操作前の十分な確認
- **可逆性**: 取り消し可能な操作の優先
- **透明性**: 操作内容の明確な説明
- **段階性**: 一度に一つの操作を実行

### 適用条件
- ユーザーからの明示的な許可がある場合
- 変更内容が明確に定義されている場合
- 安全性チェックをすべて通過した場合

## 操作前チェックリスト

### 必須確認事項
- [ ] **ユーザー許可**: Git操作の明示的な許可を得ている
- [ ] **変更内容確認**: `git status`で変更内容を確認済み
- [ ] **コミット前チェック**: 004-変更規模別ルールのコミット前チェックリスト完了
- [ ] **作業ディレクトリ**: 正しいディレクトリで作業している
- [ ] **ブランチ確認**: 適切なブランチ（通常はmain）にいる

### 安全性チェック
- [ ] **機密情報**: コミット対象に機密情報が含まれていない
- [ ] **大容量ファイル**: 不適切な大容量ファイルが含まれていない
- [ ] **システムファイル**: 意図しないシステムファイルが含まれていない
- [ ] **バックアップ**: 重要な変更の場合は事前バックアップ済み

## Git操作の実行手順

### 1. 状況確認フェーズ
```bash
# 現在の状況確認
git status
git branch
git log --oneline -5
```

**確認項目**:
- 変更されたファイルの一覧
- 現在のブランチ
- 最近のコミット履歴

### 2. ステージングフェーズ
```bash
# 全ファイルをステージング
git add .

# または特定ファイルのみ
git add [ファイル名]
```

**注意事項**:
- `git add .`は慎重に使用
- 必要に応じて個別ファイル指定を推奨

### 3. コミットフェーズ
```bash
# コミット実行
git commit -m "[適切なコミットメッセージ]"
```

**コミットメッセージの基準**:
- **簡潔性**: 50文字以内の要約
- **明確性**: 何を変更したかが明確
- **一貫性**: プロジェクト内で統一された形式

### 4. プッシュフェーズ
```bash
# リモートリポジトリにプッシュ
git push
```

**プッシュ前確認**:
- コミットが正常に完了している
- プッシュ先が正しいリモートリポジトリ
- ネットワーク接続が安定している

## コミットメッセージの規則

### 基本形式
```
[種類]: [簡潔な説明]

[詳細説明（必要に応じて）]
```

### 種類の分類
- **feat**: 新機能追加
- **fix**: バグ修正
- **docs**: ドキュメント更新
- **style**: フォーマット変更
- **refactor**: リファクタリング
- **test**: テスト追加・修正
- **chore**: その他の変更

### 品詞学習システム固有の形式
```
[品詞名]: [変更内容] - [バージョン]
システム: [システム変更内容]
ルール: [ルール変更内容]
```

**例**:
- `名詞: 可算名詞の分類を詳細化 - v1.1.0`
- `システム: バージョン管理システムを導入`
- `ルール: Git操作管理ルールを追加`

## エラー処理と復旧

### 一般的なエラーと対処法

#### コミット失敗時
```bash
# 最後のコミットを修正
git commit --amend -m "[修正されたメッセージ]"

# ステージングを取り消し
git reset HEAD [ファイル名]
```

#### プッシュ失敗時
```bash
# リモートの最新状態を取得
git fetch

# 必要に応じてマージ
git merge origin/main
```

#### 緊急時の復旧
```bash
# 最後のコミットを取り消し（作業ディレクトリは保持）
git reset --soft HEAD~1

# 完全に最後のコミットを取り消し
git reset --hard HEAD~1
```

## 自動化可能な操作

### 安全な自動化対象
- `git status` - 状況確認
- `git add .` - ステージング（確認後）
- `git commit -m "[メッセージ]"` - コミット（メッセージ確認後）
- `git push` - プッシュ（確認後）

### 手動確認が必要な操作
- `git reset` - 取り消し操作
- `git merge` - マージ操作
- `git rebase` - リベース操作
- `git branch -d` - ブランチ削除

## 定期メンテナンス

### 週次チェック項目
- [ ] リモートリポジトリとの同期状況確認
- [ ] 不要なファイルの確認
- [ ] コミット履歴の整理状況確認

### 月次チェック項目
- [ ] .gitignoreファイルの見直し
- [ ] リポジトリサイズの確認
- [ ] バックアップ状況の確認

## 権限と責任

### AI（Claude）の権限
- **許可された操作**: status確認、add、commit、push
- **制限された操作**: reset、merge、branch操作、設定変更
- **必須条件**: ユーザーの明示的許可

### ユーザーの責任
- **最終確認**: すべてのGit操作の最終承認
- **バックアップ**: 重要なデータのバックアップ
- **設定管理**: Git設定の管理と維持

## 緊急時対応

### 重大な問題発生時
1. **即座停止**: すべてのGit操作を停止
2. **状況報告**: 問題の詳細をユーザーに報告
3. **権限移譲**: ユーザーによる手動対応を推奨
4. **学習記録**: 問題の原因と対策を記録

### 復旧支援
- 問題の診断支援
- 復旧手順の提案
- 予防策の提案

## 関連ファイル
- [[004-変更規模別ルール.mdc]] - コミット前チェックリスト
- [[008-AI実装ガイドライン.mdc]] - AI操作の基本制約
- [[006-検証・品質管理.mdc]] - 品質管理プロセス

## 適用条件
- Git操作の実行時
- リポジトリ管理の変更時
- バージョン管理システムの運用時
- 緊急時の復旧作業時
