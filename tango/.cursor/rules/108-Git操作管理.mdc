---
description: "Git操作の安全な実行と管理に関する専門ルール - ユーザー許可・段階的実行・エラー処理を含む包括的Git操作ガイド"
globs: ["**/*.md", "**/*.mdc", ".git/**"]
alwaysApply: false
---
# Git操作管理 [Conditional]

このルールはGit操作の安全な実行と管理に関する専門ルールです。

## 基本方針

### Git操作の安全性原則
- **慎重性**: 操作前の十分な確認
- **可逆性**: 取り消し可能な操作の優先
- **透明性**: 操作内容の明確な説明
- **段階性**: 一度に一つの操作を実行
- **学習継続性**: TOEIC学習・Anki連携の継続性確保

### 適用条件
- ユーザーからの明示的な許可がある場合
- 変更内容が明確に定義されている場合
- 安全性チェックをすべて通過した場合
- TOEIC表現・Anki設定への影響が評価済みの場合
- PowerShell操作の安定化が必要な場合（[[004-PowerShell操作ガイド.mdc]]との連携）
- Git差分分析での詳細確認が必要な場合（[[006-Git差分分析管理.mdc]]との連携）

## 操作前チェックリスト

### 必須確認事項
- [ ] **ユーザー許可**: Git操作の明示的な許可を得ている
- [ ] **変更内容確認**: `git status`で変更内容を確認済み
- [ ] **コミット前チェック**: [[103-変更規模別ルール.mdc]]のコミット前チェックリスト完了
- [ ] **作業ディレクトリ**: 正しいディレクトリで作業している
- [ ] **ブランチ確認**: 適切なブランチ（通常はmain）にいる

### TOEIC・Anki特化チェック
- [ ] **表現ファイル整合性**: 慣用句・句動詞ファイルの整合性確認
- [ ] **Anki設定保護**: Obsidian_to_ankiプラグイン設定の保護確認
- [ ] **タグ体系維持**: TOEIC表現タグ体系の一貫性確認
- [ ] **学習データ保護**: 学習進捗・統計データの保護確認

### 安全性チェック
- [ ] **機密情報**: コミット対象に機密情報が含まれていない
- [ ] **大容量ファイル**: 不適切な大容量ファイルが含まれていない
- [ ] **システムファイル**: 意図しないシステムファイルが含まれていない
- [ ] **バックアップ**: 重要な変更の場合は事前バックアップ済み
- [ ] **Anki連携**: Ankiデータベースへの影響がないことを確認

## Git操作の実行手順

### 1. 状況確認フェーズ
**重要**: PowerShell実行前に [[004-PowerShell操作ガイド.mdc]] のPSReadLine無効化を実行してください。

```bash
# PSReadLine無効化（詳細は [[004-PowerShell操作ガイド.mdc]] 参照）
Remove-Module PSReadLine -Force -ErrorAction SilentlyContinue

# 現在の状況確認
git status
git branch
git log --oneline -5

# 詳細な差分分析が必要な場合（[[006-Git差分分析管理.mdc]] 参照）
# Get-GitChangesSummary -CommitRange 1
```

**確認項目**:
- 変更されたファイルの一覧
- 現在のブランチ
- 最近のコミット履歴
- TOEIC表現ファイルの変更状況
- Anki関連設定ファイルの状態

### 2. ステージングフェーズ
```bash
# 全ファイルをステージング
git add .

# または特定ファイルのみ
git add [ファイル名]
```

**注意事項**:
- `git add .`は慎重に使用
- 必要に応じて個別ファイル指定を推奨
- .ankiファイル等の除外確認

### 3. コミットフェーズ

#### コミット前メッセージ検証（必須）
```bash
# メッセージ作成前の確認手順
echo "[作成したメッセージ]" | wc -c  # 文字数確認
```

**必須チェック項目**:
- [ ] **文字数**: 50文字以内（`echo "メッセージ" | wc -c`で確認）
- [ ] **改行**: 改行文字が含まれていない
- [ ] **特殊文字**: |, ;, ", \n等が含まれていない
- [ ] **内容明確性**: 変更内容が1行で理解できる

#### 安全なコミット実行
```bash
# 短いメッセージでのコミット（推奨）
git commit -m "feat: 表構造統一完了"

# 文字数確認済みメッセージでのコミット
git commit -m "[検証済み50文字以内メッセージ]"
```

#### コミットメッセージ生成支援

**変更種別の自動判定**:
1. **新規ファイル追加** → `feat: [機能名]追加`
2. **既存ファイル修正** → `fix: [問題]修正` または `docs: [文書]更新`
3. **ルールファイル変更** → `feat: [ルール名]ルール追加/更新`
4. **README変更** → `docs: README更新`
5. **表構造変更** → `feat: 表構造統一完了`

**文字数最適化テクニック**:
- 「管理」→「管理」（そのまま）
- 「システム」→「システム」（そのまま）
- 「完全実装」→「実装完了」（1文字削減）
- 「新規追加」→「追加」（2文字削減）
- 「アップデート」→「更新」（4文字削減）

### 4. プッシュフェーズ
```bash
# リモートリポジトリにプッシュ
git push
```

**プッシュ前確認**:
- コミットが正常に完了している
- プッシュ先が正しいリモートリポジトリ
- ネットワーク接続が安定している
- TOEIC学習・Anki連携への影響が最小限

## コミットメッセージの規則

### 🚨 重要制約事項

#### 文字数制限（厳守）
- **最大50文字**: 1行メッセージの絶対上限
- **推奨30-40文字**: 可読性を考慮した推奨範囲
- **改行禁止**: 単一行メッセージのみ使用
- **特殊文字回避**: パイプ(|)・セミコロン(;)等の使用禁止

#### エラー防止チェックリスト
- [ ] **文字数確認**: 50文字以内であることを確認
- [ ] **改行確認**: 改行文字が含まれていないことを確認
- [ ] **引用符確認**: ダブルクォート内にダブルクォートが含まれていないことを確認
- [ ] **特殊文字確認**: コマンドライン問題を起こす文字が含まれていないことを確認

### 実用的基本形式

#### 標準形式（推奨）
```
[種類]: [変更内容の要約]
```

#### 文字数別テンプレート

**30文字以内（最優先）**:
- `feat: 表構造統一完了`
- `fix: リンク切れ修正`
- `docs: README更新`
- `anki: カード最適化`
- `toeic: Part7強化`

**40文字以内（推奨）**:
- `feat: 慣用表現管理ルール追加`
- `fix: Ankiラベル分類エラー修正`
- `docs: 学習ガイド更新完了`
- `anki: プラグイン設定最適化`
- `toeic: 優先度システム改善`

**50文字以内（上限）**:
- `feat: README管理・表構造統一システム完了`
- `fix: TOEIC表現ファイル相互参照エラー修正`
- `docs: 品詞学習システム包括的更新完了`

### 種類の分類（簡潔版）
- **feat**: 新機能追加
- **fix**: バグ修正
- **docs**: ドキュメント更新
- **style**: フォーマット変更
- **refactor**: リファクタリング
- **anki**: Anki関連の変更
- **toeic**: TOEIC特化機能の変更
- **chore**: その他の変更

### TOEIC・Anki特化の簡潔パターン

#### 表現管理系
- `feat: [単語]表現完全実装`
- `feat: 慣用句管理ルール追加`
- `feat: 句動詞分類システム完了`
- `fix: 表現相互参照エラー修正`

#### システム管理系
- `feat: README管理システム追加`
- `feat: 品質検証システム完了`
- `fix: Ankiラベル整合性修正`
- `docs: 学習ガイド更新`

#### 学習効率系
- `toeic: Part別優先度最適化`
- `anki: カード生成効率向上`
- `feat: 学習フロー改善完了`

### 🚫 使用禁止パターン

#### 長すぎるメッセージ（NG例）
```
❌ feat: 表構造管理システム完全統合 - 107-README管理・205-慣用表現一覧管理新規追加・204-Anki文例セクション管理更新 | 表列順序統一: Ankiラベル位置・TOEIC文脈列追加対応
```

#### 改行を含むメッセージ（NG例）
```
❌ feat: システム統合完了
   - README管理追加
   - 表構造統一
```

#### 特殊文字問題（NG例）
```
❌ feat: システム統合|README管理;表構造統一
❌ feat: "システム"統合完了
```

### ✅ 推奨パターン（実用例）

#### 今回のケースでの適切な例
```
✅ feat: 表構造管理システム統合完了
✅ feat: README・慣用表現管理ルール追加
✅ docs: 表列順序統一対応完了
✅ feat: 管理ルール体系強化完了
```

### メッセージ作成手順

#### 1. 変更内容の特定
- 何を変更したかを1つの動詞で表現
- 最も重要な変更を特定

#### 2. 文字数チェック
- 作成したメッセージの文字数を確認
- 50文字を超える場合は要約・短縮

#### 3. 特殊文字チェック
- 改行・パイプ・セミコロン等の除去
- ダブルクォート内のダブルクォート除去

#### 4. 最終確認
- 内容が明確に伝わるか
- Git操作で問題が発生しないか

## エラー処理と復旧

### 一般的なエラーと対処法

#### コミット失敗時
```bash
# 最後のコミットを修正
git commit --amend -m "[修正されたメッセージ]"

# ステージングを取り消し
git reset HEAD [ファイル名]
```

#### プッシュ失敗時
```bash
# リモートの最新状態を取得
git fetch

# 必要に応じてマージ
git merge origin/main
```

#### 緊急時の復旧
```bash
# 最後のコミットを取り消し（作業ディレクトリは保持）
git reset --soft HEAD~1

# 完全に最後のコミットを取り消し
git reset --hard HEAD~1
```

### TOEIC・Anki特化エラー対応

#### Anki設定破損時
1. **即座停止**: Git操作を停止
2. **設定確認**: .obsidian/plugins/obsidian-to-anki-plugin/ の状態確認
3. **バックアップ復元**: Anki設定の事前バックアップからの復元
4. **連携確認**: Obsidian_to_ankiプラグインの動作確認

#### TOEIC表現データ破損時
1. **影響範囲特定**: 破損した表現ファイルの特定
2. **学習継続性確保**: 緊急用表現リストでの学習継続
3. **データ復旧**: 最新の正常バックアップからの復元
4. **整合性確認**: 表現間相互参照の整合性確認

## 自動化可能な操作

### 安全な自動化対象
- `git status` - 状況確認
- `git add .` - ステージング（確認後）
- `git commit -m "[メッセージ]"` - コミット（メッセージ確認後）
- `git push` - プッシュ（確認後）

### 手動確認が必要な操作
- `git reset` - 取り消し操作
- `git merge` - マージ操作
- `git rebase` - リベース操作
- `git branch -d` - ブランチ削除
- Anki設定ファイルの変更
- TOEIC表現分類の大幅変更

## 定期メンテナンス

### 週次チェック項目
- [ ] リモートリポジトリとの同期状況確認
- [ ] 不要なファイルの確認
- [ ] コミット履歴の整理状況確認
- [ ] TOEIC表現ファイルの整合性確認
- [ ] Anki連携の正常性確認

### 月次チェック項目
- [ ] .gitignoreファイルの見直し
- [ ] リポジトリサイズの確認
- [ ] バックアップ状況の確認
- [ ] TOEIC学習効果の統計更新
- [ ] Anki学習データの最適化

### TOEIC・Anki特化メンテナンス
- [ ] **表現データベース整合性**: 全表現ファイル間の相互参照確認
- [ ] **タグ体系一貫性**: TOEIC表現タグの統一性確認
- [ ] **Anki統合状況**: プラグイン連携・カード生成の正常性確認
- [ ] **学習統計更新**: スコア向上・定着率等の統計情報更新

## 権限と責任

### AI（Claude）の権限

#### 許可された操作
- **status確認**: `git status`、`git branch`、`git log`
- **ステージング**: `git add .`（確認後）
- **コミット**: `git commit -m "[メッセージ]"`（検証後）
- **プッシュ**: `git push`（確認後）

#### 制限された操作
- **reset**: `git reset`（取り消し操作）
- **merge**: `git merge`（マージ操作）
- **branch操作**: ブランチ作成・削除
- **設定変更**: Git設定の変更
- **Anki設定変更**: プラグイン設定の変更

#### AI実行時の必須制約
- **ユーザー許可**: 明示的な許可の確認
- **メッセージ検証**: 50文字以内・改行なし・特殊文字なしの確認
- **文字数自動チェック**: コミット前の文字数確認実行
- **エラー予防**: 問題のあるメッセージでの実行回避
- **TOEIC・Anki制約**: 学習継続性を最優先に考慮

#### コミットメッセージ自動検証手順
1. **文字数カウント**: メッセージの文字数を事前確認
2. **特殊文字検出**: 問題となる文字の有無確認
3. **改行検出**: 改行文字の有無確認
4. **長さ調整**: 50文字超過時の自動短縮提案
5. **安全実行**: 検証通過後のコミット実行

### ユーザーの責任
- **最終確認**: すべてのGit操作の最終承認
- **バックアップ**: 重要なデータのバックアップ
- **設定管理**: Git設定の管理と維持
- **学習データ管理**: TOEIC学習進捗・Anki学習データの管理
- **Anki設定管理**: Obsidian_to_ankiプラグイン設定の管理

## 緊急時対応

### 重大な問題発生時
1. **即座停止**: すべてのGit操作を停止
2. **状況報告**: 問題の詳細をユーザーに報告
3. **学習影響評価**: TOEIC学習・Anki学習への影響度評価
4. **権限移譲**: ユーザーによる手動対応を推奨
5. **学習記録**: 問題の原因と対策を記録

### 復旧支援
- 問題の診断支援
- 復旧手順の提案
- 予防策の提案
- TOEIC学習・Anki学習の継続支援

### 学習継続性確保
- **緊急時表現リスト**: 基本的なTOEIC表現の緊急用リスト提供
- **代替学習方法**: Git復旧中の代替学習方法提案
- **進捗保護**: 学習進捗データの保護・復旧支援

## 特別考慮事項

### TOEIC学習継続性
- **定期更新**: TOEIC傾向変化に対応した定期的な表現更新
- **学習最適化**: 学習者の進捗に応じた表現優先度調整
- **効果測定**: Git操作がTOEIC学習効果に与える影響測定

### Anki統合保護
- **プラグイン互換性**: Obsidian_to_ankiプラグインの更新への対応
- **カードデータ保護**: Ankiカードデータの整合性保護
- **同期安定性**: Obsidian-Anki間の同期安定性確保

### バックアップ戦略
- **多層バックアップ**: Git、Obsidian、Ankiの多層バックアップ
- **自動バックアップ**: 重要な表現変更時の自動バックアップ
- **復旧テスト**: 定期的なバックアップ復旧テストの実施

## 関連ファイル
- [[103-変更規模別ルール.mdc]] - コミット前チェックリスト
- [[001-AI実装ガイドライン.mdc]] - AI操作の基本制約
- [[105-検証・品質管理.mdc]] - 品質管理プロセス
- [[100-基本方針.mdc]] - TOEIC学習・Anki特化の基本方針
- [[107-README管理.mdc]] - README.mdの管理と更新

## 適用条件
- Git操作の実行時
- TOEIC表現リポジトリ管理の変更時
- Anki統合システムの更新時
- バージョン管理システムの運用時
- 緊急時の復旧作業時
- TOEIC学習データの管理時
