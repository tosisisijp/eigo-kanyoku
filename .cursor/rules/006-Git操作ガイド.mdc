---
description: "Git操作ガイド Git差分分析・変更可視化・PowerShell関数・AIエージェント対応の包括的Git操作ガイド - ページャー問題対策・汎用プロジェクト対応・差分統計・変更規模分析機能"
globs: [
  "**/*.md",
  "**/*.txt", 
  "**/*.json",
  "**/*.yml",
  "**/*.yaml",
  "**/*.mdc",
  ".gitignore",
  "README.md",
  "CHANGELOG.md",
  "**/*.ps1"
]
---
# Git操作ガイド [Conditional]

このルールはGit差分の取得・分析・活用に関する汎用的なルールです。

## 基本方針

### Git差分分析の目的
- **変更内容の可視化**: コミット間の差分を明確に把握
- **影響範囲の特定**: 変更されたファイル・行数の正確な把握
- **品質管理支援**: 変更内容の妥当性確認
- **ドキュメント更新支援**: 変更に基づく関連文書の更新判定

### 適用条件
- コミット前の変更内容確認時
- ドキュメント更新の判定時
- プロジェクト状況の分析時
- 品質管理プロセスでの変更確認時

## PowerShell実行環境

### 最適化された実行環境
**[[004-PowerShell操作ガイド.mdc]]** の包括的リファクタリングにより、PowerShell操作時の問題は根本的に解決されています。

### 安定した動作保証
- **自動環境判定**: AIエージェント環境の自動認識と最適設定
- **問題の根本解決**: PSReadLine、バッファサイズ、文字コード問題の完全解決
- **出力完全性**: Git差分結果の完全で安定した取得・表示

## 基本Git差分コマンド

### AIエージェント実行時の制約

#### ページャー問題の対策
**問題**: AIエージェント実行時に `git diff`, `git log`, `git show` でページャー（less）が起動し、コマンドが停止する

**PowerShell対応解決策**: `--no-pager` オプションまたは `| Out-String` を使用

```powershell
# ❌ ページャーが起動して停止するパターン
git diff
git log
git show

# ✅ PowerShell環境でのページャー無効化（推奨）
git --no-pager diff
git --no-pager log
git --no-pager show
git --no-pager log --oneline -10
git --no-pager diff --stat

# ✅ 代替方法：パイプライン使用
git diff | Out-String
git log | Out-String
git show | Out-String
```

#### 適用対象の Git コマンド
以下のコマンドはAIエージェント実行時に **必ず `--no-pager` オプションまたは `| Out-String` を使用**：

- **差分表示系**: `git --no-pager diff`, `git --no-pager diff --stat`, `git --no-pager diff --word-diff`
- **ログ表示系**: `git --no-pager log`, `git --no-pager log --oneline`, `git --no-pager show`
- **ブランチ比較系**: `git --no-pager diff branch1 branch2`
- **その他**: ページャーを使用する全てのGitコマンド

#### 実装時の注意点
- **必須適用**: このルールのすべてのgitコマンド例に適用
- **PowerShell最適化**: `--no-pager` オプション優先、`| Out-String` は代替手段
- **004番ルール連携**: PowerShell環境最適化との相乗効果

### 変更ファイル一覧の取得
```powershell
# 最終コミットからの変更ファイル一覧
$changedFiles = git --no-pager diff --name-only HEAD~1 HEAD
Write-Host "=== 変更ファイル一覧 ===" -ForegroundColor Cyan
$changedFiles | ForEach-Object { Write-Host "- $_" -ForegroundColor Yellow }

# ワーキングディレクトリの未コミット変更
git --no-pager diff --name-only

# ステージング済み変更
git --no-pager diff --name-only --staged
```

### 変更統計の取得
```powershell
# 詳細統計（ファイル別行数）
git --no-pager diff --stat HEAD~1 HEAD

# 数値統計のみ
git --no-pager diff --numstat HEAD~1 HEAD

# 簡潔な統計
git --no-pager diff --shortstat HEAD~1 HEAD
```

### 期間指定の差分取得
```powershell
# 過去N コミット分の変更
git --no-pager diff --name-only HEAD~3 HEAD  # 過去3コミット分
git --no-pager diff --name-only HEAD~5 HEAD  # 過去5コミット分

# 特定コミット間の差分
git --no-pager diff --name-only [コミットハッシュ1] [コミットハッシュ2]

# 特定日付以降の変更
git --no-pager diff --name-only --since="2024-01-01" HEAD
```

## 汎用Git差分分析関数

### 基本変更サマリー関数
```powershell
function Get-GitChangesSummary {
    param(
        [int]$CommitRange = 1,
        [string]$FilePattern = "*"
    )
    
    Write-Host "=== Git変更内容サマリー ===" -ForegroundColor Cyan
    Write-Host "対象範囲: HEAD~$CommitRange から HEAD" -ForegroundColor Gray
    
    # 1. 変更ファイル一覧
    $changedFiles = git --no-pager diff --name-only HEAD~$CommitRange HEAD
    if ($FilePattern -ne "*") {
        $changedFiles = $changedFiles | Where-Object { $_ -like $FilePattern }
    }
    
    Write-Host "`n変更ファイル数: $($changedFiles.Count)" -ForegroundColor Green
    $changedFiles | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
    
    # 2. 変更統計
    Write-Host "`n変更統計:" -ForegroundColor Green
    git --no-pager diff --stat HEAD~$CommitRange HEAD
    
    return $changedFiles
}
```

### ファイル種別別分析関数
```powershell
function Get-GitChangesByFileType {
    param(
        [int]$CommitRange = 1,
        [string[]]$Extensions = @("md", "txt", "json", "yml", "yaml")
    )
    
    Write-Host "=== ファイル種別別変更分析 ===" -ForegroundColor Cyan
    
    $allChanges = git --no-pager diff --name-only HEAD~$CommitRange HEAD
    
    foreach ($ext in $Extensions) {
        $filesOfType = $allChanges | Where-Object { $_ -match "\.$ext$" }
        if ($filesOfType.Count -gt 0) {
            Write-Host "`n.$ext ファイル ($($filesOfType.Count)件):" -ForegroundColor Green
            $filesOfType | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
        }
    }
    
    # その他のファイル
    $otherFiles = $allChanges | Where-Object { 
        $file = $_
        -not ($Extensions | Where-Object { $file -match "\.$_$" })
    }
    if ($otherFiles.Count -gt 0) {
        Write-Host "`nその他のファイル ($($otherFiles.Count)件):" -ForegroundColor Green
        $otherFiles | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
    }
}
```

### 変更規模分析関数
```powershell
function Get-GitChangesScale {
    param([int]$CommitRange = 1)
    
    Write-Host "=== 変更規模分析 ===" -ForegroundColor Cyan
    
    # 統計情報取得
    $stats = git --no-pager diff --numstat HEAD~$CommitRange HEAD
    $totalAdded = 0
    $totalDeleted = 0
    $fileCount = 0
    
    foreach ($line in $stats) {
        if ($line -match "^(\d+)\s+(\d+)\s+(.+)$") {
            $totalAdded += [int]$matches[1]
            $totalDeleted += [int]$matches[2]
            $fileCount++
        }
    }
    
    Write-Host "`n変更規模:" -ForegroundColor Green
    Write-Host "  ファイル数: $fileCount" -ForegroundColor White
    Write-Host "  追加行数: $totalAdded" -ForegroundColor Green
    Write-Host "  削除行数: $totalDeleted" -ForegroundColor Red
    Write-Host "  正味変更: $($totalAdded - $totalDeleted)" -ForegroundColor Yellow
    
    # 規模判定
    $scale = if ($fileCount -le 2 -and ($totalAdded + $totalDeleted) -le 50) { "軽微" }
             elseif ($fileCount -le 10 -and ($totalAdded + $totalDeleted) -le 200) { "中規模" }
             else { "大規模" }
    
    Write-Host "  変更規模: $scale" -ForegroundColor Magenta
    
    return @{
        FileCount = $fileCount
        Added = $totalAdded
        Deleted = $totalDeleted
        Scale = $scale
    }
}
```

## 特殊用途向け分析関数

### ドキュメント更新判定関数
```powershell
function Test-DocumentUpdateNeeded {
    param(
        [int]$CommitRange = 1,
        [string[]]$DocumentFiles = @("README.md", "CHANGELOG.md", "docs/*.md"),
        [string[]]$SourceExtensions = @("md", "txt", "json", "yml", "yaml")
    )
    
    Write-Host "=== ドキュメント更新判定 ===" -ForegroundColor Cyan
    
    # 変更されたソースファイル
    $changedFiles = git --no-pager diff --name-only HEAD~$CommitRange HEAD
    $changedSources = $changedFiles | Where-Object { 
        $file = $_
        $SourceExtensions | Where-Object { $file -match "\.$_$" }
    }
    
    # ドキュメントファイルの変更確認
    $changedDocs = $changedFiles | Where-Object {
        $file = $_
        $DocumentFiles | Where-Object { $file -like $_ }
    }
    
    Write-Host "`n変更されたソースファイル ($($changedSources.Count)件):" -ForegroundColor Green
    $changedSources | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
    
    Write-Host "`n変更されたドキュメント ($($changedDocs.Count)件):" -ForegroundColor Green
    $changedDocs | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
    
    # 判定結果
    $needsUpdate = ($changedSources.Count -gt 0) -and ($changedDocs.Count -eq 0)
    
    if ($needsUpdate) {
        Write-Host "`n📝 ドキュメント更新が必要です" -ForegroundColor Magenta
        Write-Host "理由: ソースファイルが変更されましたが、ドキュメントが更新されていません" -ForegroundColor Magenta
    } else {
        Write-Host "`n✅ ドキュメント更新は適切です" -ForegroundColor Green
    }
    
    return @{
        NeedsUpdate = $needsUpdate
        ChangedSources = $changedSources
        ChangedDocs = $changedDocs
    }
}
```

## コミット管理の汎用基盤

### コミットメッセージの基本制約

#### 🚨 汎用的制約事項（全プロジェクト共通）

##### 文字数制限（厳守）
- **最大50文字**: 1行メッセージの絶対上限
- **推奨30-40文字**: 可読性を考慮した推奨範囲
- **改行禁止**: 単一行メッセージのみ使用
- **特殊文字回避**: パイプ(|)・セミコロン(;)等の使用禁止

##### エラー防止チェックリスト
- [ ] **文字数確認**: 50文字以内であることを確認
- [ ] **改行確認**: 改行文字が含まれていないことを確認
- [ ] **引用符確認**: ダブルクォート内にダブルクォートが含まれていないことを確認
- [ ] **特殊文字確認**: コマンドライン問題を起こす文字が含まれていないことを確認

### コミットメッセージの汎用テンプレート

#### 標準形式（推奨）
```
[種類]: [変更内容の要約]
```

#### 汎用的な種類分類
- **feat**: 新機能追加
- **fix**: バグ修正
- **docs**: ドキュメント更新
- **style**: フォーマット変更
- **refactor**: リファクタリング
- **test**: テスト追加・修正
- **chore**: その他の変更

#### 文字数別テンプレート

**30文字以内（最優先）**:
- `feat: 機能追加完了`
- `fix: エラー修正`
- `docs: 文書更新`
- `style: フォーマット統一`
- `refactor: コード整理`

**40文字以内（推奨）**:
- `feat: 新機能実装・テスト完了`
- `fix: 重要なバグ修正・検証済み`
- `docs: READMEとガイド更新完了`
- `refactor: コード構造改善・最適化`

**50文字以内（上限）**:
- `feat: 包括的機能実装・統合テスト・文書化完了`
- `fix: 重要バグ修正・回帰テスト・影響範囲確認完了`
- `docs: プロジェクト文書包括更新・構造改善完了`

### コミット前検証手順

#### 1. メッセージ作成前の確認
```bash
# メッセージ文字数確認
echo "[作成したメッセージ]" | wc -c
```

#### 2. 必須チェック項目
- [ ] **文字数**: 50文字以内（`echo "メッセージ" | wc -c`で確認）
- [ ] **改行**: 改行文字が含まれていない
- [ ] **特殊文字**: |, ;, ", \n等が含まれていない
- [ ] **内容明確性**: 変更内容が1行で理解できる

#### 3. 安全なコミット実行
```bash
# 推奨: 短いメッセージでのコミット
git commit -m "feat: 機能追加完了"

# 文字数確認済みメッセージでのコミット
git commit -m "[検証済み50文字以内メッセージ]"
```

### 🚫 使用禁止パターン（汎用）

#### 長すぎるメッセージ（NG例）
```
❌ feat: 包括的システム実装 - 新機能追加・バグ修正・ドキュメント更新・テスト完了・リファクタリング実施・パフォーマンス最適化・セキュリティ強化
```

#### 改行を含むメッセージ（NG例）
```
❌ feat: システム実装完了
   - 新機能追加
   - テスト完了
```

#### 特殊文字問題（NG例）
```
❌ feat: 実装|テスト;完了  # パイプとセミコロンでコマンド分割
❌ feat: "システム"完了   # ダブルクォート地獄
```

### メッセージ作成支援

#### 変更種別の自動判定
1. **新規ファイル追加** → `feat: [機能名]追加`
2. **既存ファイル修正** → `fix: [問題]修正` または `docs: [文書]更新`
3. **設定ファイル変更** → `chore: [設定名]更新`
4. **テストファイル変更** → `test: [テスト名]追加/修正`
5. **文書変更** → `docs: [文書名]更新`

#### 文字数最適化テクニック
- 「実装」→「実装」（そのまま）
- 「システム」→「システム」（そのまま）
- 「完全実装」→「実装完了」（1文字削減）
- 「新規追加」→「追加」（2文字削減）
- 「アップデート」→「更新」（4文字削減）

## 高度なGit差分分析

### 詳細な変更内容確認
```powershell
# 特定ファイルの変更内容
git --no-pager diff HEAD~1 HEAD [ファイル名]

# 単語レベルでの差分表示
git --no-pager diff --word-diff HEAD~1 HEAD [ファイル名]

# 空白変更を無視
git --no-pager diff --ignore-space-change HEAD~1 HEAD

# 行移動を検出
git --no-pager diff --color-moved HEAD~1 HEAD
```

### ブランチ間差分
```powershell
# ブランチ間の差分
git --no-pager diff main feature-branch

# マージベースからの差分
git --no-pager diff $(git merge-base main feature-branch) feature-branch

# 特定ブランチの独自変更
git --no-pager diff main...feature-branch
```

## 実用的な使用例

### 日常的な変更確認
```powershell
# 1. 基本的な変更確認
Get-GitChangesSummary

# 2. ファイル種別別確認
Get-GitChangesByFileType

# 3. 変更規模の確認
Get-GitChangesScale

# 4. ドキュメント更新判定
Test-DocumentUpdateNeeded
```

### 特定用途での使用
```powershell
# 過去3コミット分の変更確認
Get-GitChangesSummary -CommitRange 3

# .mdファイルのみの変更確認
Get-GitChangesSummary -FilePattern "*.md"

# 特定拡張子の変更分析
Get-GitChangesByFileType -Extensions @("md", "mdc", "json")
```

## チェックリスト

### Git差分分析時の確認項目
- [ ] **コミット範囲**: 適切なコミット範囲を指定している
- [ ] **ファイル種別**: 対象ファイル種別が適切に設定されている
- [ ] **変更規模**: 変更規模が期待される範囲内である
- [ ] **影響範囲**: 変更の影響範囲が適切に把握されている

### ドキュメント更新判定時の確認項目
- [ ] **ソース変更確認**: ソースファイルの変更内容を確認済み
- [ ] **ドキュメント対応**: 対応するドキュメントの更新要否を判定済み
- [ ] **更新範囲**: 必要な更新範囲を特定済み
- [ ] **整合性**: ソースとドキュメントの整合性を確認済み

## 関連ファイル
- [[004-PowerShell操作ガイド.mdc]] - PowerShell環境の包括的最適化とAIエージェント対応
- [[108-Git操作管理.mdc]] - プロジェクト固有のGit操作管理
- [[107-README管理.mdc]] - README更新でのGit差分活用
- [[105-検証・品質管理.mdc]] - 品質管理プロセスでの活用

## 適用条件
- Git差分の分析が必要な場合
- 変更内容の可視化が必要な場合
- ドキュメント更新の判定が必要な場合
- プロジェクト状況の分析が必要な場合
- 品質管理プロセスでの変更確認時
