---
description: "Git操作の安全な実行と管理に関する専門ルール - ユーザー許可・段階的実行・エラー処理を含む包括的Git操作ガイド"
globs: ["**/*.md", "**/*.mdc", ".git/**"]
alwaysApply: false
---
# Git操作管理 [Conditional]

このルールはGit操作の安全な実行と管理に関する専門ルールです。

## 基本方針

### Git操作の安全性原則
- **慎重性**: 操作前の十分な確認
- **可逆性**: 取り消し可能な操作の優先
- **透明性**: 操作内容の明確な説明
- **段階性**: 一度に一つの操作を実行
- **学習継続性**: TOEIC学習・Anki連携の継続性確保

### 適用条件
- ユーザーからの明示的な許可がある場合
- 変更内容が明確に定義されている場合
- 安全性チェックをすべて通過した場合
- TOEIC表現・Anki設定への影響が評価済みの場合

## 操作前チェックリスト

### 必須確認事項
- [ ] **ユーザー許可**: Git操作の明示的な許可を得ている
- [ ] **変更内容確認**: `git status`で変更内容を確認済み
- [ ] **コミット前チェック**: [[103-変更規模別ルール.mdc]]のコミット前チェックリスト完了
- [ ] **作業ディレクトリ**: 正しいディレクトリで作業している
- [ ] **ブランチ確認**: 適切なブランチ（通常はmain）にいる

### TOEIC・Anki特化チェック
- [ ] **表現ファイル整合性**: 慣用句・句動詞ファイルの整合性確認
- [ ] **Anki設定保護**: Obsidian_to_ankiプラグイン設定の保護確認
- [ ] **タグ体系維持**: TOEIC表現タグ体系の一貫性確認
- [ ] **学習データ保護**: 学習進捗・統計データの保護確認

### 安全性チェック
- [ ] **機密情報**: コミット対象に機密情報が含まれていない
- [ ] **大容量ファイル**: 不適切な大容量ファイルが含まれていない
- [ ] **システムファイル**: 意図しないシステムファイルが含まれていない
- [ ] **バックアップ**: 重要な変更の場合は事前バックアップ済み
- [ ] **Anki連携**: Ankiデータベースへの影響がないことを確認

## Git操作の実行手順

### 1. 状況確認フェーズ

#### 基本状況確認
```bash
# 現在の状況確認
git status
git branch
git log --oneline -5
```

**確認項目**:
- 変更されたファイルの一覧
- 現在のブランチ
- 最近のコミット履歴
- TOEIC表現ファイルの変更状況
- Anki関連設定ファイルの状態

#### Git差分による詳細分析

**Git差分の詳細な分析機能は [[006-Git差分分析管理.mdc]] を参照してください。**

##### TOEIC・Anki特化のGit差分活用
```powershell
# TOEIC表現ファイルの変更確認
Get-GitChangesByFileType -Extensions @("md") | Where-Object { 
    $_ -match "(慣用句|句動詞|TOEIC|表現|ビジネス)" 
}

# Anki関連設定ファイルの変更確認
Get-GitChangesByFileType -Extensions @("json") | Where-Object { 
    $_ -match "(anki|obsidian)" 
}

# README更新判定（TOEIC特化）
function Test-TOEICReadmeUpdateNeeded {
    $result = Test-DocumentUpdateNeeded -DocumentFiles @("README.md") -SourceExtensions @("md")
    
    if ($result.NeedsUpdate) {
        Write-Host "`n🎯 TOEIC学習システム関連の更新が検出されました" -ForegroundColor Magenta
        Write-Host "📚 以下の表現ファイルが変更されています:" -ForegroundColor Magenta
        $result.ChangedSources | Where-Object { 
            $_ -match "(慣用句|句動詞|TOEIC|表現|ビジネス|接続)" 
        } | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
    }
    
    return $result
}
```

### 2. README確認・更新フェーズ（必須）

#### README更新判定（自動）
```powershell
# 107番ルール準拠のREADME更新確認
$readmeCheck = Test-TOEICReadmeUpdateNeeded
if ($readmeCheck.NeedsUpdate) {
    Write-Host "⚠️  README更新が必要です" -ForegroundColor Yellow
    Write-Host "📋 107-README管理.mdcに従ってREADME.mdを更新してください" -ForegroundColor Cyan
    
    # Git差分に基づくREADME更新の実行
    Write-Host "🔄 Git差分ベースのREADME更新を実行しますか？ (Y/N)" -ForegroundColor Magenta
    # 手動確認後、107番ルールの更新プロセスを実行
}
```

#### コミット前README確認チェックリスト
- [ ] **Git差分確認**: [[006-Git差分分析管理.mdc]]でGit差分を確認済み
- [ ] **README更新判定**: 変更内容に応じたREADME更新の必要性を判定済み
- [ ] **107番ルール適用**: README更新が必要な場合、[[107-README管理.mdc]]に従って更新済み
- [ ] **最新成果反映**: 今回セッションの技術的成果・ルール変更をREADMEに反映済み
- [ ] **日付更新**: [[005-日付取得管理.mdc]]に従って最終更新日を更新済み
- [ ] **Git差分整合性**: README記載内容とGit差分の整合性を確認済み

#### README更新忘れ防止機能
```powershell
# コミット前README確認の自動実行
function Invoke-PreCommitReadmeCheck {
    Write-Host "=== コミット前README確認 ===" -ForegroundColor Cyan
    
    # 1. Git差分の確認
    $changes = git diff --name-only HEAD
    if ($changes) {
        Write-Host "📊 変更ファイル検出:" -ForegroundColor Green
        $changes | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
        
        # 2. README更新判定
        $needsReadmeUpdate = $false
        
        # ルールファイル変更の場合
        if ($changes -match "\.mdc$") {
            Write-Host "🔧 ルールファイル変更検出 → README更新推奨" -ForegroundColor Magenta
            $needsReadmeUpdate = $true
        }
        
        # 表現ファイル大量変更の場合
        $mdChanges = $changes | Where-Object { $_ -match "\.md$" -and $_ -notmatch "README\.md" }
        if ($mdChanges.Count -ge 5) {
            Write-Host "📚 表現ファイル大量変更検出 ($($mdChanges.Count)件) → README更新推奨" -ForegroundColor Magenta
            $needsReadmeUpdate = $true
        }
        
        # 3. README更新確認
        if ($needsReadmeUpdate) {
            Write-Host "`n❗ README更新が推奨されます" -ForegroundColor Red
            Write-Host "📋 107-README管理.mdcに従ってREADME.mdを更新してください" -ForegroundColor Cyan
            Write-Host "🛑 README更新後にコミットを再実行してください" -ForegroundColor Red
            return $false
        } else {
            Write-Host "✅ README更新は不要と判定されました" -ForegroundColor Green
            return $true
        }
    } else {
        Write-Host "✅ 変更なし - README確認スキップ" -ForegroundColor Green
        return $true
    }
}

# 使用例
# if (Invoke-PreCommitReadmeCheck) { git add . } else { Write-Host "README更新してください" }
```

#### README更新プロセス連携
- **107番ルール参照**: [[107-README管理.mdc]]の「Git差分統合システム」を活用
- **006番ルール活用**: [[006-Git差分分析管理.mdc]]でGit差分の詳細分析
- **005番ルール準拠**: [[005-日付取得管理.mdc]]で最終更新日の動的取得

### 3. ステージングフェーズ
```bash
# README確認完了後のステージング
git add .

# または特定ファイルのみ
git add [ファイル名]
```

**注意事項**:
- `git add .`は慎重に使用
- 必要に応じて個別ファイル指定を推奨
- .ankiファイル等の除外確認

### 4. コミットフェーズ
```bash
# README確認完了後のコミット実行
git commit -m "[適切なコミットメッセージ]"
```

**コミットメッセージの基準**:
- **簡潔性**: 50文字以内の要約
- **明確性**: 何を変更したかが明確
- **一貫性**: プロジェクト内で統一された形式
- **TOEIC関連**: Part・頻出度への影響を記載
- **Anki関連**: カード作成・学習効率への影響を記載
- **README整合性**: README更新との整合性を確保

### 5. プッシュフェーズ
```bash
# リモートリポジトリにプッシュ
git push
```

**プッシュ前確認**:
- コミットが正常に完了している
- プッシュ先が正しいリモートリポジトリ
- ネットワーク接続が安定している
- TOEIC学習・Anki連携への影響が最小限

## コミットメッセージの規則

### 基本形式
```
[種類]: [簡潔な説明]

[詳細説明（必要に応じて）]
```

### 種類の分類
- **feat**: 新機能追加
- **fix**: バグ修正
- **docs**: ドキュメント更新
- **style**: フォーマット変更
- **refactor**: リファクタリング
- **test**: テスト追加・修正
- **anki**: Anki関連の変更
- **toeic**: TOEIC特化機能の変更
- **chore**: その他の変更

### TOEIC表現学習システム固有の形式
```
[表現種別]: [変更内容] - [バージョン] ([TOEIC影響])
Anki: [Anki関連変更内容]
システム: [システム変更内容]
ルール: [ルール変更内容]
```

**例**:
- `慣用句: ビジネス慣用句の分類を詳細化 - v1.1.0 (Part 7強化)`
- `句動詞: 高頻出句動詞の例文を追加 - v1.0.1 (600点対応)`
- `Anki: Obsidian_to_ankiプラグイン設定を最適化`
- `TOEIC: Part別分類体系を全面的に再構築 - v2.0.0`
- `システム: 表現管理システムを導入`
- `ルール: TOEIC特化Git操作管理ルールを追加`

### TOEIC・Anki特化情報の追加
```
[基本メッセージ]

TOEIC影響:
- Part別影響: [該当Part番号]
- 頻出度影響: [高/中/低頻出への影響]
- スコア帯影響: [対象スコア帯]

Anki影響:
- カードタイプ: [基本/穴埋め/例文/音声]
- デッキ影響: [影響を受けるデッキ]
- 学習効率: [向上/維持/要調整]
```

## エラー処理と復旧

### 一般的なエラーと対処法

#### コミット失敗時
```bash
# 最後のコミットを修正
git commit --amend -m "[修正されたメッセージ]"

# ステージングを取り消し
git reset HEAD [ファイル名]
```

#### プッシュ失敗時
```bash
# リモートの最新状態を取得
git fetch

# 必要に応じてマージ
git merge origin/main
```

#### 緊急時の復旧
```bash
# 最後のコミットを取り消し（作業ディレクトリは保持）
git reset --soft HEAD~1

# 完全に最後のコミットを取り消し
git reset --hard HEAD~1
```

### TOEIC・Anki特化エラー対応

#### Anki設定破損時
1. **即座停止**: Git操作を停止
2. **設定確認**: .obsidian/plugins/obsidian-to-anki-plugin/ の状態確認
3. **バックアップ復元**: Anki設定の事前バックアップからの復元
4. **連携確認**: Obsidian_to_ankiプラグインの動作確認

#### TOEIC表現データ破損時
1. **影響範囲特定**: 破損した表現ファイルの特定
2. **学習継続性確保**: 緊急用表現リストでの学習継続
3. **データ復旧**: 最新の正常バックアップからの復元
4. **整合性確認**: 表現間相互参照の整合性確認

## 自動化可能な操作

### 安全な自動化対象
- `git status` - 状況確認
- `git add .` - ステージング（確認後）
- `git commit -m "[メッセージ]"` - コミット（メッセージ確認後）
- `git push` - プッシュ（確認後）

### 手動確認が必要な操作
- `git reset` - 取り消し操作
- `git merge` - マージ操作
- `git rebase` - リベース操作
- `git branch -d` - ブランチ削除
- Anki設定ファイルの変更
- TOEIC表現分類の大幅変更

## 定期メンテナンス

### 週次チェック項目
- [ ] リモートリポジトリとの同期状況確認
- [ ] 不要なファイルの確認
- [ ] コミット履歴の整理状況確認
- [ ] TOEIC表現ファイルの整合性確認
- [ ] Anki連携の正常性確認

### 月次チェック項目
- [ ] .gitignoreファイルの見直し
- [ ] リポジトリサイズの確認
- [ ] バックアップ状況の確認
- [ ] TOEIC学習効果の統計更新
- [ ] Anki学習データの最適化

### TOEIC・Anki特化メンテナンス
- [ ] **表現データベース整合性**: 全表現ファイル間の相互参照確認
- [ ] **タグ体系一貫性**: TOEIC表現タグの統一性確認
- [ ] **Anki統合状況**: プラグイン連携・カード生成の正常性確認
- [ ] **学習統計更新**: スコア向上・定着率等の統計情報更新

## 権限と責任

### AI（Claude）の権限
- **許可された操作**: status確認、add、commit、push
- **制限された操作**: reset、merge、branch操作、設定変更、Anki設定変更
- **必須条件**: ユーザーの明示的許可
- **TOEIC・Anki制約**: 学習継続性を最優先に考慮

### ユーザーの責任
- **最終確認**: すべてのGit操作の最終承認
- **バックアップ**: 重要なデータのバックアップ
- **設定管理**: Git設定の管理と維持
- **学習データ管理**: TOEIC学習進捗・Anki学習データの管理
- **Anki設定管理**: Obsidian_to_ankiプラグイン設定の管理

## 緊急時対応

### 重大な問題発生時
1. **即座停止**: すべてのGit操作を停止
2. **状況報告**: 問題の詳細をユーザーに報告
3. **学習影響評価**: TOEIC学習・Anki学習への影響度評価
4. **権限移譲**: ユーザーによる手動対応を推奨
5. **学習記録**: 問題の原因と対策を記録

### 復旧支援
- 問題の診断支援
- 復旧手順の提案
- 予防策の提案
- TOEIC学習・Anki学習の継続支援

### 学習継続性確保
- **緊急時表現リスト**: 基本的なTOEIC表現の緊急用リスト提供
- **代替学習方法**: Git復旧中の代替学習方法提案
- **進捗保護**: 学習進捗データの保護・復旧支援

## 特別考慮事項

### TOEIC学習継続性
- **定期更新**: TOEIC傾向変化に対応した定期的な表現更新
- **学習最適化**: 学習者の進捗に応じた表現優先度調整
- **効果測定**: Git操作がTOEIC学習効果に与える影響測定

### Anki統合保護
- **プラグイン互換性**: Obsidian_to_ankiプラグインの更新への対応
- **カードデータ保護**: Ankiカードデータの整合性保護
- **同期安定性**: Obsidian-Anki間の同期安定性確保

### バックアップ戦略
- **多層バックアップ**: Git、Obsidian、Ankiの多層バックアップ
- **自動バックアップ**: 重要な表現変更時の自動バックアップ
- **復旧テスト**: 定期的なバックアップ復旧テストの実施

## 関連ファイル
- [[006-Git差分分析管理.mdc]] - Git差分の汎用的な分析機能
- [[103-変更規模別ルール.mdc]] - コミット前チェックリスト
- [[001-AI実装ガイドライン.mdc]] - AI操作の基本制約
- [[105-検証・品質管理.mdc]] - 品質管理プロセス
- [[100-基本方針.mdc]] - TOEIC学習・Anki特化の基本方針
- [[107-README管理.mdc]] - README.mdの管理と更新

## 適用条件
- Git操作の実行時
- TOEIC表現リポジトリ管理の変更時
- Anki統合システムの更新時
- バージョン管理システムの運用時
- 緊急時の復旧作業時
- TOEIC学習データの管理時
