---
description: "AI実装ガイドライン（常時適用・最優先制約）"
globs: ["**/*.md", "**/*.mdc"]
tags: ["ai-implementation", "safety-constraints", "always-apply"]
priority: 0
---
# AI実装ガイドライン [Always]

このルールはAIエージェントがシステムを正しく理解・実装するための専用ガイドラインです。

## 🚨 絶対的制約事項

### フロントマター取扱い
```
🚫 mdcファイル（ルールファイル）の制約:
- mdcファイルのYAML frontmatter（--- で囲まれた部分）の評価・指摘は禁止
- フロントマター関連問題の報告は禁止
- フロントマターの修正提案は禁止
- **ファイル冒頭付近の --- の削除・移動は禁止**
- **フロントマター終了の --- の削除・移動は禁止**

✅ mdファイル（コンテンツファイル）の推奨:
- mdファイルのYAML frontmatterの適切な管理・評価
- タグ設定の確認・改善提案
- title・description等の品質評価
- フロントマター構造の最適化提案
- コンテンツ部分（# 見出し以降）の編集・評価
```

### mdcファイルのフロントマター構造保護
```yaml
mdcファイルの正常な構造:
---
description: ...
globs: ...
alwaysApply: true
---

# タイトル
コンテンツ...
```

**絶対保護対象**:
- ファイル冒頭の `---`（フロントマター開始）
- フロントマター終了の `---`（コンテンツ開始前）
- 両者の間のYAML設定内容

### ファイル種別の明確な区別
```yaml
mdcファイル（ルール定義）:
場所: .cursor/rules/内
拡張子: .mdc
フロントマター: 評価対象外（触らない）
コンテンツ: 評価対象

mdファイル（学習コンテンツ）:
場所: ワークスペースルート
拡張子: .md  
フロントマター: 評価対象（積極的に改善）
コンテンツ: 評価対象
```

## 編集実行時の制約

### 必須確認事項
1. **編集対象の特定**: mdかmdcかを明確に識別
2. **制約範囲の確認**: フロントマター除外の適用
3. **権限範囲の確認**: ユーザー専有領域の回避
4. **mdcファイル編集時の構造確認**:
   - ファイル先頭の `---` が保持されているか
   - フロントマター終了の `---` が保持されているか
   - `# タイトル` より前の領域が未変更か

### mdcファイル編集の安全手順
```
編集前チェック:
☑️ ファイルが .mdc .md のどちらの拡張子か確認
☑️ 拡張子が.mdの場合のみフロントマター構造の現状把握
☑️ 編集対象が # 見出し以降のコンテンツ部分か確認

編集実行時:
☑️ 先頭から5行目以内に --- 区切り文字があった場合、それより上は絶対に触らない
☑️ YAML部分（description, globs等）を絶対に変更しない
☑️ コンテンツ部分のみに編集を限定

編集後検証:
☑️ .mdcファイルの場合はフロントマター構造検証しない
```

### 実装時の優先順位
AI実装時の詳細な優先順位体系は **[[102-基本編集ルール.mdc]]** で定義されています。
基本的な実装優先順位：
```
優先度1: ユーザー指示の正確な実行
優先度2: 既存システムの整合性維持  
優先度3: 追加品質改善の提案
```

### PowerShellコマンド生成時の事前チェック（新規追加）

#### 必須事前判定項目
PowerShellコマンド生成前に以下を確認：

1. **文字数チェック**
   - 推奨上限: 6000文字
   - 危険域: 8000文字超
   - 超過予想時: 自動分割実行

2. **複雑さチェック**
   - 日本語文字列の多用（結果分類キー等）
   - ネストしたループ（foreach内foreach等）
   - 大量の条件分岐（if-elseif-else連鎖）
   - 配列操作の複数実行
   - ハッシュテーブル操作の複雑化

3. **PSReadLineエラー回避**
   - 長いコマンドライン入力の回避
   - 複雑な文字列処理の分割
   - バッファオーバーフロー防止

#### 自動分割基準
以下の場合は**必ず分割実行**：
- 文字数が6000文字を超える場合
- 日本語キー名を持つハッシュテーブルを使用する場合
- foreach内で複数の条件分岐がある場合
- 複数ファイルを対象とした複雑な処理の場合

#### 分割実行パターン
```powershell
# ❌ 避けるべきパターン（一括実行）
foreach ($file in $files) { 複雑な処理... }

# ✅ 推奨パターン（段階実行）
# 段階1: データ収集
# 段階2: 分類処理  
# 段階3: 結果表示
```

### PowerShell操作時の制約
**基本制約**:
- PowerShellコマンド生成・実行時は **[[004-PowerShell操作ガイド.mdc]]** の制約に従う
- コマンド長制限、関数定義問題、文字コード確認等の技術的詳細は004番ルールを参照

## エラー処理方針

### mdcファイル誤修正時
- **即座停止**: フロントマター修正の検出時
- **権限移譲**: ユーザーによる手動修正待ち
- **作業継続**: コンテンツ部分の編集は継続

### 実行時問題発生時の学習・改善プロセス
**重要**: 当初の手順でうまくいかない場合のノウハウ蓄積プロセス（必須）

#### 段階1: 問題の特定・記録
- **症状の詳細記録**: エラーメッセージ、発生条件、再現手順
- **原因の仮説立て**: 技術的要因、環境要因、手順要因の分析
- **影響範囲の把握**: 他の操作への影響、代替手段の必要性

#### 段階2: 解決プロセスの記録
- **試行した対処法**: 成功・失敗を問わず全ての試行を記録
- **成功要因の特定**: 最終的に成功した手法とその理由
- **失敗要因の分析**: 効果がなかった手法とその原因

#### 段階3: ノウハウ体系化の提案（必須）
**提案タイミング**: 問題解決完了後、作業終了前
**提案形式**: 
- 既存ルールへの追記提案
- 新規ルール作成提案  
- 関連ルール間の連携強化提案

**具体的な提案内容**:
- **予防策**: 同様の問題を防ぐための事前チェック項目
- **対処法**: 問題発生時の標準的な対応手順
- **代替手段**: 主要手法が使えない場合の代替方法
- **復旧手順**: 中断時の状況復旧方法

#### 実装例：PowerShell関数永続性問題
**問題**: 定義した関数が新しいセッションで認識されない
**解決**: Global スコープでの関数定義、代替コマンドの準備
**ノウハウ体系化**: [[004-PowerShell操作ガイド.mdc]] への「関数永続性対応策」セクション追加

#### 実装例：検証プロセス中断問題  
**問題**: 一括検証→個別確認→修正→再検証の流れが中断
**解決**: 中断時の復旧手順、段階的検証方法の確立
**ノウハウ体系化**: [[004-PowerShell操作ガイド.mdc]] への「検証プロセス中断時の復旧手順」セクション追加

### 矛盾解決の優先順位
1. ユーザーの明示的指示
2. 安全性・整合性の確保
3. **学習・改善**: 問題解決時のノウハウ蓄積・体系化
4. ルールの文言的遵守

## コミュニケーション方針

### 報告スタイル
- **簡潔性**: 冗長な説明の回避
- **焦点化**: 要求された変更に集中
- **建設性**: 解決策中心の提案

### 確認プロセス
- **事前確認**: 大規模変更時のユーザー承認
- **事後報告**: 実装完了の簡潔な確認
- **例外報告**: 制約に抵触した場合のみ

## 適用範囲
- 全mdcファイル編集時の必須制約
- 全AI操作での安全性確保
- Cursorワークスペースでの汎用的なガイドライン

## 独立性の確保

### Always適用ルールとしての位置づけ
**[当ルール]**: AI実装ガイドライン [Always]
- **役割**: AIエージェントの安全な動作を保証する最優先制約
- **適用範囲**: 全mdcファイル編集・全AI操作
- **制約レベル**: 絶対的（例外なし）
- **独立性**: 他ルールへの依存を最小化

### エラー処理・安全性での中核的役割

#### mdcファイル誤修正時の最高権威
```yaml
権限階層:
001-AI実装ガイドライン (最高権威)
  ↓ 制約定義
他の全ルール (制約適用下で動作)
  ↓ 安全な実行  
実際の編集作業 (制約保護下で実施)
```

#### 制約の適用原則
- **直接制約**: mdcファイル編集時の即座適用
- **絶対制約**: いかなる状況でも例外なし
- **独立動作**: 他ルールの状態に依存しない

### AI実装時の優先順位
```yaml
Priority 0 (Meta): 001-AI実装ガイドライン
Priority 1: ユーザー指示・安全性
Priority 2: システム整合性
Priority 3: 品質改善
```

### 実際のルール適用フロー
```
全作業開始
    ↓
001制約確認 (必須・自動)
    ↓
ファイル種別判定 (.md/.mdc)
    ↓         ↓
mdファイル   mdcファイル
    ↓         ↓
通常フロー   001厳格制約下
    ↓         ↓
安全な実行   コンテンツのみ編集
    ↓         ↓
完了確認     安全性優先完了
```

### システム全体の安全性への貢献
- **破滅的事故防止**: フロントマター破損の完全防止
- **権限分離**: AI/ユーザー権限の明確な分離
- **安全優先文化**: 完成度より安全性を優先する文化の確立
- **復旧方針**: 事故発生時の適切な対応手順の確立


















